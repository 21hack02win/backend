openapi: 3.0.3
info:
  title: nascalay
  version: '1.0'
  description: nascalay v1 API
  contact:
    name: 21hack02win
    url: 'https://github.com/21hack02win'
servers:
  - url: 'https://api.nascalay.trasta.dev'
paths:
  /rooms/new:
    post:
      summary: createRoom
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
      operationId: createRoom
      parameters: []
      description: 新規ルーム作成
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
      tags:
        - room
  /rooms/join:
    post:
      summary: joinRoom
      operationId: joinRoom
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
      description: ルームに参加
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinRoomRequest'
      tags:
        - room
  '/rooms/{roomId}':
    parameters:
      - $ref: '#/components/parameters/roomIdInPath'
    get:
      summary: getRoom
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
      operationId: getRoom
      description: ルーム情報を取得
      tags:
        - room
  /ws:
    get:
      summary: getWs
      parameters:
        - $ref: '#/components/parameters/userIdInQuery'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsSendMessage'
      operationId: ws
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WsReceiveMessage'
        description: ''
      description: |-
        Websocketを送受信する

        {
            type: tag,
            "body": {
                "------"
            }
        }
      tags:
        - ws
  /ping:
    get:
      summary: ping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      operationId: ping
      description: 疎通確認
      tags:
        - ping
components:
  schemas:
    Room:
      title: Room
      type: object
      description: ルーム情報
      example:
        roomId: Nao340bzc0
        capacity: 0
        userId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        hostId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        members:
          - userId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
            username: John
            avatar:
              type: 5
              color: '#ffffff'
      properties:
        roomId:
          type: string
          pattern: '^[A-Za-z0-9]{10}$'
          description: ルームID
        capacity:
          type: integer
          description: ルームの最大収容人数
        userId:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          description: ユーザーUUID
        hostId:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          description: ホストのユーザーUUID
        members:
          type: array
          description: 現在ルームにいるメンバーの情報
          items:
            $ref: '#/components/schemas/User'
      required:
        - roomId
        - capacity
        - userId
        - hostId
        - members
    User:
      title: User
      type: object
      description: ユーザー情報
      example:
        userId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        username: John
        avatar:
          type: 5
          color: '#ffffff'
      properties:
        userId:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          description: ユーザーUUID
        username:
          type: string
          description: ユーザー名
        avatar:
          $ref: '#/components/schemas/Avatar'
      required:
        - userId
        - username
        - avatar
    Avatar:
      title: Avatar
      type: object
      description: アバター情報
      example:
        type: 5
        color: '#ffffff'
      properties:
        type:
          type: integer
          description: アバターの種類
        color:
          type: string
          description: アバターの背景色
          pattern: '^#[a-fA-F0-9]{6}'
      required:
        - type
        - color
    CreateRoomRequest:
      title: CreateRoomRequest
      type: object
      description: 新規ルーム作成リクエスト
      example:
        username: John
        avatar:
          type: 5
          color: '#ffffff'
        capacity: 4
      properties:
        username:
          type: string
          description: ユーザー名
        avatar:
          $ref: '#/components/schemas/Avatar'
        capacity:
          type: integer
          description: ルームの最大収容人数
      required:
        - username
        - avatar
        - capacity
    JoinRoomRequest:
      title: JoinRoomRequest
      type: object
      description: ルーム参加リクエスト
      example:
        roomId: Nao340bzc0
        username: John
        avatar:
          type: 5
          color: '#ffffff'
      properties:
        roomId:
          type: string
          pattern: '^[A-Za-z0-9]{10}$'
          description: ルームID
        username:
          type: string
          description: ユーザー名
        avatar:
          $ref: '#/components/schemas/Avatar'
      required:
        - roomId
        - username
        - avatar
    Canvas:
      title: Canvas
      type: object
      description: ユーザーが描画するキャンバスの分割情報・描画位置
      example:
        boardName: 5×5
        areaId: 5
      properties:
        boardName:
          type: string
          description: ボード名
        areaId:
          type: integer
          description: ボードの座標ID
      required:
        - boardName
        - areaId
    WsEvent:
      title: WsEvent
      type: string
      description: Websocketイベントのリスト
      enum:
        - ROOM_NEW_MEMBER
        - ROOM_SET_OPTION
        - ROOM_UPDATE_OPTION
        - REQUEST_GAME_START
        - GAME_START
        - ODAI_READY
        - ODAI_CANCEL
        - ODAI_INPUT
        - ODAI_FINISH
        - ODAI_SEND
        - DRAW_START
        - DRAW_READY
        - DRAW_CANCEL
        - DRAW_INPUT
        - DRAW_FINISH
        - DRAW_SEND
        - ANSWER_START
        - ANSWER_READY
        - ANSWER_CANCEL
        - ANSWER_INPUT
        - ANSWER_FINISH
        - ANSWER_SEND
        - SHOW_START
        - SHOW_NEXT
        - SHOW_ODAI
        - SHOW_CANVAS
        - SHOW_ANSWER
        - RETURN_ROOM
        - NEXT_ROOM
        - CHANGE_HOST
        - BREAK_ROOM
        - WELCOME_NEW_CLIENT
        - ERROR
    WsReceiveMessage:
      title: WsReceiveMessage
      description: WebSocketで クライアントからサーバーへ送信する情報
      allOf:
        - properties:
            type:
              $ref: '#/components/schemas/WsEvent'
            body:
              anyOf:
                - $ref: '#/components/schemas/WsRoomSetOptionEventBody'
                - $ref: '#/components/schemas/WsOdaiSendEventBody'
                - $ref: '#/components/schemas/WsDrawSendEventBody'
                - $ref: '#/components/schemas/WsAnswerSendEventBody'
                - type: object
          required:
            - type
            - body
      type: object
    WsSendMessage:
      title: WsSendMessage
      description: WebSocketで サーバーからクライアントへ送信する情報
      allOf:
        - properties:
            type:
              $ref: '#/components/schemas/WsEvent'
            body:
              oneOf:
                - $ref: '#/components/schemas/WsWelcomeNewClientBody'
                - $ref: '#/components/schemas/WsErrorBody'
                - $ref: '#/components/schemas/WsRoomNewMemberEventBody'
                - $ref: '#/components/schemas/WsRoomUpdateOptionEventBody'
                - $ref: '#/components/schemas/WsGameStartEventBody'
                - $ref: '#/components/schemas/WsOdaiInputEventBody'
                - $ref: '#/components/schemas/WsDrawStartEventBody'
                - $ref: '#/components/schemas/WsDrawInputEventBody'
                - $ref: '#/components/schemas/WsAnswerStartEventBody'
                - $ref: '#/components/schemas/WsAnswerInputEventBody'
                - $ref: '#/components/schemas/WsShowOdaiEventBody'
                - $ref: '#/components/schemas/WsShowCanvasEventBody'
                - $ref: '#/components/schemas/WsShowAnswerEventBody'
                - $ref: '#/components/schemas/WsChangeHostEventBody'
                - type: object
          required:
            - type
            - body
      type: object
    WsNextShowStatus:
      title: WsNextWsEvent
      type: string
      description: 次のWebsocketイベントのリスト
      enum:
        - odai
        - canvas
        - answer
        - end
    WsWelcomeNewClientBody:
      title: WsWelcomeNewClientBody
      type: object
      description: 接続時に送信する (サーバー -> 新規クライアント)
      example:
        content: Welcome to nascalay-backend!
      properties:
        content:
          type: string
          description: 接続確認メッセージ
      required:
        - content
    WsErrorBody:
      title: WsErrorBody
      type: object
      description: エラー用ボディ
      example:
        content: connection failed
      properties:
        content:
          type: string
          description: エラーの内容
      required:
        - content
    WsRoomNewMemberEventBody:
      title: WsRoomNewMemberEventBody
      type: object
      description: 部屋に追加のメンバーが来たことを通知する (サーバー -> ルーム全員)
      example:
        capacity: 0
        hostId: 70e3fb2d-1cb6-4dbc-ab8d-fa7209aca5dd
        members:
          - userId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
            username: John
            avatar:
              type: 5
              color: '#ffffff'
      properties:
        capacity:
          type: integer
          description: ルームの最大収容人数
        hostId:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          description: ホストのユーザーUUID
        members:
          type: array
          description: 現在ルームにいるメンバーの情報
          items:
            $ref: '#/components/schemas/User'
      required:
        - capacity
        - hostId
        - members
    WsRoomSetOptionEventBody:
      title: WsRoomSetOptionEventBody
      type: object
      description: ゲームのオプションを設定する (ホスト -> サーバー)
      example:
        timeLimit: 20
      properties:
        timeLimit:
          type: integer
          description: 制限時間
    WsRoomUpdateOptionEventBody:
      title: WsRoomUpdateOptionEventBody
      type: object
      example:
        timeLimit: 20
      properties:
        timeLimit:
          type: integer
          description: 制限時間
      description: ゲームの設定を更新する (サーバー -> ルーム全員)
    WsGameStartEventBody:
      title: WsGameStartEventBody
      type: object
      description: ゲームの開始を通知する (サーバー -> ルーム全員)
      example:
        odaiExample: ねこのおばけ
        timeLimit: 40
      properties:
        odaiExample:
          type: string
          description: お題のサジェスト
        timeLimit:
          type: integer
          description: 制限時間
      required:
        - odaiExample
        - timeLimit
    WsOdaiInputEventBody:
      title: WsOdaiInputEventBody
      type: object
      example:
        ready: 2
      description: お題入力が完了した人数を送信する (サーバー -> ルームの各員)
      properties:
        ready:
          type: integer
          description: お題入力が完了した人数
      required:
        - ready
    WsOdaiSendEventBody:
      title: WsOdaiSendEventBody
      type: object
      example:
        odai: ねこのおばけ
      description: お題を送信する (ルームの各員 -> サーバー)
      properties:
        odai:
          type: string
          description: お題
      required:
        - odai
    WsDrawStartEventBody:
      title: WsDrawStartEventBody
      type: object
      example:
        timeLimit: 40
        canvas:
          boardName: 5x5
          areaId: 5
        img: iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKAQAAAAClSfIQAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgA...
        odai: ねこのおばけ
        drawPhaseNum: 3
        allDrawPhaseNum: 10
        drawnArea:
          - 3
          - 1
          - 5
      description: キャンバス情報とお題を送信する (サーバー -> ルーム各員)
      properties:
        timeLimit:
          type: integer
          description: 制限時間
        canvas:
          $ref: '#/components/schemas/Canvas'
        img:
          type: string
          description: 画像ID
        odai:
          type: string
          description: お題
        drawPhaseNum:
          type: integer
          description: 現在のDRAWフェーズの番号
        allDrawPhaseNum:
          type: integer
          description: 全DRAWフェーズ数
        drawnArea:
          type: array
          description: 埋まっているエリアの一覧
          items:
            type: integer
      required:
        - timeLimit
        - canvas
        - img
        - odai
        - drawPhaseNum
        - allDrawPhaseNum
        - drawnArea
    WsDrawInputEventBody:
      title: WsDrawInputEventBody
      type: object
      example:
        ready: 2
      description: 絵を描き終えた人数を送信する (サーバー -> ルームの各員)
      properties:
        ready:
          type: integer
          description: 絵を描き終えた人数
      required:
        - ready
    WsDrawSendEventBody:
      title: WsDrawSendEventBody
      type: object
      example:
        img: iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKAQAAAAClSfIQAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgA...
      description: |-
        絵を送信する (ルームの各員 -> サーバー)

        -> (DRAWフェーズが終わってなかったら) また，DRAW_START が飛んでくる
      properties:
        img:
          type: string
          description: 画像ID
      required:
        - img
    WsAnswerStartEventBody:
      title: WsAnswerStartEventBody
      type: object
      description: 絵が飛んできて，回答する (サーバー -> ルーム各員)
      example:
        timeLimit: 40
        img: iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKAQAAAAClSfIQAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgA...
      properties:
        timeLimit:
          type: integer
          description: 制限時間
        img:
          type: string
          description: 画像ID
      required:
        - timeLimit
        - img
    WsAnswerInputEventBody:
      title: WsAnswerInputEventBody
      type: object
      example:
        ready: 2
      description: 回答の入力が完了した人数を送信する (サーバー -> ルームの各員)
      properties:
        ready:
          type: integer
          description: 回答の入力が完了した人数
      required:
        - ready
    WsAnswerSendEventBody:
      title: WsAnswerSendEventBody
      type: object
      description: 回答を送信する (ルームの各員 -> サーバー)
      example:
        answer: ねこのおばけ
      properties:
        answer:
          type: string
          description: 回答
      required:
        - answer
    WsShowOdaiEventBody:
      title: WsShowOdaiEventBody
      type: object
      description: 最初のお題を受信する (サーバー -> ルーム全員)
      example:
        odai: そうじきをかけるねこ
        sender:
          userId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          username: John
          avatar:
            type: 5
            color: '#ffffff'
        next: odai
      properties:
        odai:
          type: string
          description: お題
        sender:
          $ref: '#/components/schemas/User'
        next:
          $ref: '#/components/schemas/WsNextShowStatus'
      required:
        - odai
        - sender
        - next
    WsShowCanvasEventBody:
      title: WsShowCanvasEventBody
      type: object
      example:
        img: iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKAQAAAAClSfIQAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgA...
        next: odai
      description: 次のキャンバスを受信する (サーバー -> ルーム全員)
      properties:
        img:
          type: string
          description: 画像ID
        next:
          $ref: '#/components/schemas/WsNextShowStatus'
      required:
        - img
        - next
    WsShowAnswerEventBody:
      title: WsShowAnswerEventBody
      type: object
      description: 最後の回答を受信する (サーバー -> ルーム全員)
      example:
        answer: そうじきをかけるねこ
        answerer:
          userId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          username: John
          avatar:
            type: 5
            color: '#ffffff'
        next: odai
      properties:
        answer:
          type: string
          description: 回答
        answerer:
          $ref: '#/components/schemas/User'
        next:
          $ref: '#/components/schemas/WsNextShowStatus'
      required:
        - answer
        - answerer
        - next
    WsChangeHostEventBody:
      title: WsChangeHostEventBody
      type: object
      description: 最後の回答を受信する (サーバー -> ルーム全員)
      example:
        hostId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      properties:
        hostId:
          type: string
          format: uuid
          description: ホストのユーザーUUID
      required:
        - hostId
  parameters:
    roomIdInPath:
      name: roomId
      in: path
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z0-9]{10}$'
        description: ルームID
      description: ルームID
    userIdInQuery:
      name: user
      in: query
      required: true
      schema:
        type: string
        format: uuid
      description: ユーザーUUID
tags:
  - name: room
    description: ルームAPI
  - name: ws
    description: WebsocketAPI
  - name: ping
    description: 疎通確認API
